{"version":3,"sources":["comp/Footer.js","comp/Header.js","comp/Allflights.js","comp/Register.js","comp/Login.js","comp/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Component","Header","href","id","Allflights","this","props","flight","destination","src","img","price","Register","state","name","username","password","lastname","onChange","handleChange","bind","type","value","for","onClick","register","class","ev","setState","Object","defineProperty","target","alert","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","r","json","jsonData","Login","login","sidebarLogin","Sidebar","comp","switchComp","comp_Login","userLoggedIn","comp_Register","vicComponents","result","map","vic","comp_Allflights","key","user","userChoiceComp","App","comp_Header","comp_Sidebar","comp_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08e706c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n \n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n \n\n \n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n \n\nclass Header extends Component {\n  render() {\n    return (\n    \n <nav>\n    <div className=\"nav-wrapper\">\n      <a href=\"#\" className=\"brand-logo\">flights</a>\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n        <li><a href=\"sass.html\">Home</a></li>\n        <li><a href=\"badges.html\">Flights</a></li>\n        <li><a href=\"collapsible.html\">login/logout</a></li>\n      </ul>\n    </div>\n  </nav>\n \n \n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n \n\nclass Allflights extends Component {\n  render() {debugger;\n    return (\n      <div className=\"col s8 \">\n  <h3>{this.props.flight.destination} </h3>\n  <img  src={this.props.flight.img}></img>\n  <h4> {this.props.flight.price}</h4>\n \n      </div>\n    );\n  }\n}\n\nexport default Allflights;\n","import React, { Component } from 'react';\n \n\nclass Register extends Component {\n\nstate={\n  name:'',\n    username:'',\n    password:'',\n    lastname:''\n}\n\n\n  render() {\n    return (\n      <div>\n   <div className=\"col s12\"> \n   <h5>Register</h5>\n      <div className=\"row\">\n        <div className=\"input-field col s6\">\n          <input  onChange={this.handleChange.bind(this)}  name=\"username\" type=\"text\" className=\"validate\" value={this.state.username}    />\n          <label for=\"first_name\">Username</label>\n        </div>\n        <div className=\"input-field col s6\">\n          <input onChange={this.handleChange.bind(this)}   name=\"password\" type=\"password\" className=\"validate\" value={this.state.password}    />\n          <label for=\"last_name\">Password</label>\n        </div> \n\n        <div className=\"input-field col s6\">\n          <input onChange={this.handleChange.bind(this)}   name=\"lastname\" type=\"text\" className=\"validate\" value={this.state.lastname}    />\n          <label for=\"last_name\">lastname</label>\n        </div> \n        <div className=\"input-field col s6\">\n          <input onChange={this.handleChange.bind(this)}   name=\"name\" type=\"text\" className=\"validate\" value={this.state.name}    />\n          <label for=\"last_name\">first name</label>\n        </div> \n\n        <button  onClick={this.register.bind(this)} class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Register\n             <i class=\"material-icons right\">send</i>\n         </button>\n      </div> \n  </div>\n \n      </div>\n    );\n  }\n \n\n  handleChange(ev)\n  {\n    this.setState({ [ev.target.name]:ev.target.value })    //{username:sima} \n  }\n\n\nasync register()\n{\nif(this.state.username==''&&this.state.password==''&&this.state.name=='' &&this.state.lastname=='' ){\n  alert(\"plese fill all form\")\n}\nelse{\n\n    const r = await fetch('http://localhost:3000/register', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify( this.state)\n      });\n\n    let jsonData= await r.json(); \n    if(jsonData)\n    {\n        alert(jsonData)\n    }\n}\n\n}\n}\nexport default Register;\n","import React, { Component } from 'react';\n \n\nclass Login extends Component {\n  \nstate={\n    username:'',\n    password:''\n}\n\n\n  render() {\n\n\n\n    return (\n      <div  >\n   <div className=\"col s12\"> \n   <h5>Login</h5>\n      <div className=\"row\">\n      <div className=\"input-field col s6\">\n      <input  onChange={this.handleChange.bind(this)}  name=\"username\" type=\"text\" className=\"validate\" value={this.state.username}    />\n          <label for=\"first_name\">Username</label>\n        </div>\n        <div className=\"input-field col s6\">\n          <input   onChange={this.handleChange.bind(this)}   name=\"password\" type=\"password\" className=\"validate\" value={this.state.password}/>\n          <label for=\"last_name\">Password</label>\n        </div> \n        <button  onClick={this.login.bind(this)}   class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Login\n             <i class=\"material-icons right\">send</i>\n         </button>\n      </div> \n  </div>\n \n      </div>\n    );\n  }\n\n\n  handleChange(ev)\n  {\n    this.setState({ [ev.target.name]:ev.target.value })    \n  }\n\n  async login()\n  {\n\n    if(this.state.password=='' &&this.state.username=='') {\n      alert(\"plese enter username and password \")\n    }\nelse{\n      const r = await fetch('http://localhost:3000/login', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify( this.state)\n        });\n  \n      var jsonData= await r.json(); \n    \n      if(jsonData==\"worng username or password \")\n      \n      {alert(\"nope\")\n     \n\n         }\n      \n      else{this.props.sidebarLogin(jsonData)\n        debugger;\n       ;\n      }\n  \n\n      \n}\n}\n}\n\n\nexport default Login;\n","import React, { Component } from 'react';\nimport Register from './Register';\nimport Login from './Login';\nimport Allflights from './Allflights';\nclass Sidebar extends Component {\n\n    state={\n        comp:\"login\"\n    }\n\n\n  render() {\n   \n\n      \n    if(this.state.comp==\"login\")\n    {\n        return (\n            <div className=\"col s4\">\n            <h5>  <button  onClick={this.switchComp.bind(this,'login')}   className=\"btn\">login</button>\n             or <button  onClick={this.switchComp.bind(this,'register')} className=\"btn\">register</button></h5>\n            <Login  sidebarLogin={this.userLoggedIn.bind(this)}   /> \n            </div>\n        );\n    }\n   \n    else if(this.state.comp==\"register\")\n    {\n        return (\n            <div className=\"col s4\">\n            <h5> <button  onClick={this.switchComp.bind(this,'login')}   className=\"btn\">login</button>\n             or <button  onClick={this.switchComp.bind(this,'register')} className=\"btn\">register</button></h5>\n            <Register     /> \n            </div>\n        );\n    } \n    else\n    {\n        const vicComponents = this.state.comp.result.map(vic => <Allflights key={vic.id} flight={vic}/>)\n        return (\n         \n            <div className=\"col s4\">\n            <h5>  {this.state.comp.user}</h5>\n<h1>all vications </h1>\n{vicComponents}\n\n            </div>\n        );\n    }\n   \n  }\n\n\n\n  userLoggedIn(jsonData)\n  { debugger;\n    \n        this.setState({comp:jsonData})\n  }\n\n\n  switchComp(userChoiceComp)\n  {\n        this.setState({comp:userChoiceComp});\n  }\n\n\n\n\n}\n\nexport default Sidebar;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport  Footer from './comp/Footer';\nimport Header from './comp/Header';\nimport Allflights from './comp/Allflights';\nimport Sidebar from './comp/Sidebar';\n\nclass App extends Component {\n  render() {\n    return (\n    \n      <div className=\"container\">\n        <div className=\"row\">\n         <Header/> \n        </div>\n\n        <div className=\"row\">\n        <Sidebar />\n        </div> \n\n        <div className=\"row\">\n          <Footer/> \n        </div>\n\n \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}